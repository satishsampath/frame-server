Import('env')

for sdkVersionNumber in range(2, 4):
  strVersionNumber = str(sdkVersionNumber)
  sdkDir = '../sdks/VegasV' + strVersionNumber + '/'

  # ---- libFileIO ----
  fio_env = env.Clone()

  fio_env['CPPDEFINES'] += ['_LIB']
  fio_env['CPPPATH'] = [sdkDir + 'libFileIO']
  fio_env['LIBS'] += ['rpcrt4.lib']
  fio_env['LINKFLAGS'] += ['/IGNOREIDL']

  target = 'libFileIOv' + strVersionNumber
  fio_env['PDB'] = target + '.pdb'
  bin = fio_env.Library(
    target,
    [
      sdkDir + 'libFileIO/SfAudioUtil.cpp',
      sdkDir + 'libFileIO/SfMem.cpp',
      sdkDir + 'libFileIO/SfReadStreams.cpp',
      sdkDir + 'libFileIO/SfTemplate.cpp',
      sdkDir + 'libFileIO/SfWaveFormat.cpp'
    ]
  )

  # ---- VegasV2 ----
  dll_env = env.Clone()

  dll_env['CPPDEFINES'] += ['_USRDLL', 'VEGAS_SDK_V' + strVersionNumber]
  dll_env['CPPPATH'] = [sdkDir + 'libFileIO', '..', '../fscommon', '../dfsc', '../utils']
  dll_env['LIBS'] += ['dokan1.lib', 'rpcrt4.lib', 'wininet.lib', 'libfileiov' + strVersionNumber + '.lib']
  dll_env['LIBPATH'] += ['../dokanserve/dokan/lib', '../VegasV2']
  dll_env['LINKFLAGS'] += ['/IGNOREIDL']

  target = 'dfscVegasOutV' + strVersionNumber
  dll_env['PDB'] = target + '.pdb'
  bin = dll_env.SharedLibrary(
    target,
    [
      dll_env.Object('VegasFSMainV' + strVersionNumber, 'VegasFSMain.cpp'),
      dll_env.Object('VegasFSV' + strVersionNumber, 'VegasFS.cpp'),
      dll_env.Object('VegasFSRenderV' + strVersionNumber, 'VegasFSRender.cpp'),
      'VegasFS.def',
      dll_env.RES('VegasFSV' + strVersionNumber + '.res', 'VegasFS.rc'),
    ]
  )

  # Add a post-build step to embed the manifest using mt.exe
  # The number at the end of the line indicates the file type (1: EXE; 2:DLL).
  if not dll_env['dbg']:
    dll_env.AddPostAction(bin,
      'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
  dll_env.Install('#/src/dist/bin', bin[0])
