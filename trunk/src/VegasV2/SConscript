Import('env_vc9')

# ---- libFileIO ----
fio_env = env_vc9.Clone()

fio_env['CPPDEFINES'] += ['_LIB']
fio_env['CPPPATH'] = ['../sdks/VegasV2/fio/libFileIO']
fio_env['LIBS'].remove('common.lib')
fio_env['LIBS'] += ['rpcrt4.lib']
fio_env['LINKFLAGS'] += ['/IGNOREIDL']

target = 'libFileIO'
fio_env['PDB'] = target + '.pdb'
bin = fio_env.Library(
  target,
  [
    '../sdks/VegasV2/fio/libFileIO/SfAudioUtil.cpp',
    '../sdks/VegasV2/fio/libFileIO/SfMem.cpp',
    '../sdks/VegasV2/fio/libFileIO/SfReadStreams.cpp',
    '../sdks/VegasV2/fio/libFileIO/SfTemplate.cpp',
    '../sdks/VegasV2/fio/libFileIO/SfWaveFormat.cpp'
  ]
)

# ---- VegasV2 ----
env = env_vc9.Clone()

env['CPPDEFINES'] += ['_USRDLL']
env['CPPPATH'] = ['../sdks/VegasV2/fio/libFileIO', '..', '../fscommon', '../dfsc', '../utils']
env['LIBS'].remove('common.lib')
env['LIBS'] += ['rpcrt4.lib', 'wininet.lib', 'common_unicode.lib', 'libfileio.lib']
env['LIBPATH'] += ['../VegasV2']
env['LINKFLAGS'] += ['/IGNOREIDL']

target = 'dfscVegasV2Out'
env['PDB'] = target + '.pdb'
bin = env.SharedLibrary(
  target,
  [
    'VegasFSMain.cpp',
    'VegasFS.cpp',
    'VegasFSRender.cpp',
    'VegasFS.def',
    env.RES('VegasFS.rc'),
  ]
)

# Add a post-build step to embed the manifest using mt.exe
# The number at the end of the line indicates the file type (1: EXE; 2:DLL).
if not env['dbg']:
  env.AddPostAction(bin,
    'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
env.Install('#/src/dist/bin', bin[0])
